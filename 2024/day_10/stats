Benchmark 1 (8385 runs): ./zig-out/bin/day_10
  measurement          mean ± σ            min … max           outliers
  wall_time           537us ±  124us     385us … 1.53ms         58 ( 1%)
  peak_rss            532KB ± 1.77KB     451KB …  623KB         37 ( 0%)
  cpu_cycles          335K  ± 11.0K      317K  …  438K         528 ( 6%)
  instructions        665K  ± 36.2       665K  …  665K         143 ( 2%)
  cache_references   2.98K  ±  466      2.58K  … 12.3K         239 ( 3%)
  cache_misses        338   ± 37.9       273   … 1.05K         326 ( 4%)
  branch_misses      5.02K  ±  364      4.22K  … 7.58K         499 ( 6%)

  measurement          mean ± σ            min … max           outliers
  wall_time           534us ±  116us     418us … 2.54ms       1320 (16%)
  peak_rss            622KB ± 4.64KB     377KB …  623KB          9 ( 0%)
  cpu_cycles          477K  ± 11.1K      459K  …  645K         244 ( 3%)
  instructions        709K  ± 36.2       709K  …  709K         263 ( 3%)
  cache_references   2.84K  ±  512      2.45K  … 26.7K         343 ( 4%)
  cache_misses        361   ± 49.9       294   … 1.06K         479 ( 6%)
  branch_misses      6.30K  ±  350      5.72K  … 8.58K         152 ( 2%)

  fn find_pinnacles(map: *ndarray.Matrix(u8), start: Position, stack: *std.ArrayList(Position), visited: *std.AutoHashMap(Position, void)) !struct { usize, usize } {
    const rows = map.shape[0];
    const cols = map.shape[1];

    var count: usize = 0;
    var rating: usize = 0;

    try stack.append(start);
    while (stack.popOrNull()) |p| {
        var height = map.at(.{ p.y, p.x });
        if (height == 9) {
            if (!visited.contains(p)) {
                count += 1;
                try visited.put(p, {});
            }
            rating += 1;
            continue;
        }
        height += 1;

        if (p.y > 0 and map.at(.{ p.y - 1, p.x }) == height) try stack.append(.{ .y = p.y - 1, .x = p.x });
        if (p.y < rows - 1 and map.at(.{ p.y + 1, p.x }) == height) try stack.append(.{ .y = p.y + 1, .x = p.x });
        if (p.x > 0 and map.at(.{ p.y, p.x - 1 }) == height) try stack.append(.{ .y = p.y, .x = p.x - 1 });
        if (p.x < cols - 1 and map.at(.{ p.y, p.x + 1 }) == height) try stack.append(.{ .y = p.y, .x = p.x + 1 });
    }

    return .{ count, rating };
}
